1.命名
以前我的model，都是诸如，SplashModel、MainModel这样命名的。似乎没毛病，SplashModel对应SplashActivity嘛。
但有一次，我发现我想拿SplashModel的更新功能，拿到设置界面用的使用。设置界面SettingActivity的presenter的
构造方法可能会变成了下面这样：
SettingPresenter(SplashModel splashModel) {
        mSplashModel = splashModel;
}
莫名的傻逼...

2.Model的相关类，都没有提供相关的接口。而网上的教程，基本都有提供接口。
第一，懒。
第二，RxJava为我们带来了便利。比如，以前如果我们请求一个登陆接口，Model可能得提供一个回调接口，告诉Presenter，
请求的结果：失败或者成功。
必须用回调来做的理由，是为了解耦，Model层不应该知道哪个Presenter会来调它。也就是Model不应该持有Presenter的引用。
你查看，谷歌的todo-mvp和todo-mvp-dagger，你会发现他们的model层，都有这么一个接口类：
public interface TasksDataSource {
    interface LoadTasksCallback {
         //...
    }
    interface GetTaskCallback {
        //...
    }
    //LoadTasksCallback的回调作用于此
    void getTasks(@NonNull LoadTasksCallback callback);
    //GetTaskCallback的回调作用于此
    void getTask(@NonNull String taskId, @NonNull GetTaskCallback callback);
    ......
}

但在todo-mvp-rxjava里，变成了这样：
public interface TasksDataSource {
    Flowable<List<Task>> getTasks();
    Flowable<Optional<Task>> getTask(@NonNull String taskId);
    ......
}
这样可以说是使用RxJava的好处之一。
至于我，更懒，连这个接口都懒得写了。理由下面说。

第三，如果View和Presenter的接口还有点用处的话。我觉得没事给Model都写一个接口，简直是闲得慌。
当然，谷歌的todo-mvp-rxjava的Model还是有保留接口的必要，但也是因为他们的业务场景不同，
有本地数据库、远程数据库两种情况，它的接口的保留，我觉得更多是因为“多继承”，为了编写复用性更好的代码。

当像我这里，版本更新VersionTask，只针对请求后台数据库一种情况。有没有写这个接口的必要？

下面是一段摘自《Java编程思想》第9章 接口 第188-189页的话：
“‘确定接口是理想选择，因而应该总是选择接口而不是具体的类。'这其实是一种引诱。当然，对于创建类，
几乎在任何时刻，都可以替代为创建一个接口和一个工厂。许多人都掉进了这种陷阱，只要有可能就去创建接口和工厂。
这种逻辑看起来好像是因为需要使用不同的具体实现，因此总是应该添加这种抽象性。这实际上已经变成了一种草率的设计优化。
任何抽象性都应该是应真正的需求而产生的。如果没有足够的说服力，只是为了以防万一添加新接口，
并由此带来了额外的复杂性。那么应该质疑一下这样的设计了。恰当的原则，应该是优先选择类而不是接口。
接口是一种重要工具，但它们容易被滥用。”

所以，我个人更倾向于，如无特别的必要，不提供Model的接口。
